/* Generated By:JavaCC: Do not edit this line. compTokenManager.java */
package olc2.JAVACC;
import java.io.*;

/** Token Manager. */
public class compTokenManager implements compConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x7fffc0L) != 0L)
         {
            jjmatchedKind = 95;
            return 1;
         }
         return -1;
      case 1:
         if ((active1 & 0x7fffc0L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active1 & 0x7fffc0L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active1 & 0x7eefc0L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active1 & 0x11000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active1 & 0x7ec580L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active1 & 0x2a40L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active1 & 0x7ee500L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active1 & 0x80L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active1 & 0x7ce400L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active1 & 0x20100L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active1 & 0x280000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active1 & 0x50e400L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active1 & 0x40000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active1 & 0x280000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active1 & 0x50c000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active1 & 0x2400L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active1 & 0x500000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x280000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active1 & 0xc000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active1 & 0x500000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x280000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active1 & 0xc000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active1 & 0x500000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x280000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active1 & 0xc000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      case 12:
         if ((active1 & 0x500000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x280000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active1 & 0xc000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active1 & 0x500000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active1 & 0x4000L) != 0L)
            return 1;
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active1 & 0x500000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 16;
            return 1;
         }
         if ((active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 17;
            return 1;
         }
         if ((active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x8000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 42:
         return jjStopAtPos(0, 4);
      case 43:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 45:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 47:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
      case 60:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0xffffffffffffff00L, 0x400003fL);
      case 61:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 62:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40400L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x522800L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x280000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 38:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 43:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 45:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0xaaaaaaaaaaaaaa00L, active1, 0x2aL);
      case 61:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 94:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40100000000L, active1, 0x40200L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1001000140000L, active1, 0x14L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000004000L, active1, 0xe940L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000001000L, active1, 0x520001L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000000000000L, active1, 0x280080L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x11400L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100040000100L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4015400000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000400L, active1, 0L);
      case 124:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x181200000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000280000L, active1, 0x22928L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000001000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000004415408000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2401000000002400L, active1, 0x280002L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000800000000L, active1, 0x4c000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000000000000L, active1, 0x500600L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000140000L, active1, 0x14L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x240180000200L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40806a800100L, active1, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000020000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000004800L, active1, 0x10080L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000010000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x28000000000000L, active1, 0L);
      case 97:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 1);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x242000000000L, active1, 0x500000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x11000400000000L, active1, 0x2c0000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000142000L, active1, 0x414L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x886a800100L, active1, 0xc080L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x22800L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x802000000004800L, active1, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x11100000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000000000000L, active1, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x284000000280000L, active1, 0x28L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x84200001400L, active1, 0x1L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x14000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x900080000200L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000001400000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4400000000008000L, active1, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x420000020000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000L, active1, 0x2000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x22001800000000L, active1, 0xc000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40280000L, active1, 0x28L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080010200L, active1, 0x20000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x20100L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000100148000L, active1, 0x280414L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1022200000000L, active1, 0x500000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x280000000000000L, active1, 0x100L);
      case 111:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 1);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x1018000000000400L, active1, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x4408000002800L, active1, 0x2L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x28004000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x240000001000L, active1, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2800000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x8800010401400000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400800014000000L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x280100L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x4002100000000L, active1, 0xc400L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x8054021000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x140200L, active1, 0x14L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000050200280000L, active1, 0x500028L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4402000000000000L, active1, 0x40000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 111:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x2021400000000800L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8800000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1140080001412000L, active1, 0x20001L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x24802800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800001428004100L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 48);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000200000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x1401400a8006000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x281000L, active1, 0x28L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x40a4001410000L, active1, 0xc400L);
      case 108:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x8800001000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000210000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000100L, active1, 0L);
      case 111:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x4402800000140000L, active1, 0x2014L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2280000416820000L, active1, 0x280002L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8040000000L, active1, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2800008200L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x500000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x280000L);
      case 62:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(7, 47);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(7, 49);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(7, 56);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(7, 60);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(7, 62);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x440000000140000L, active1, 0x14L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x600000000L, active1, 0x500001L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x280290040008000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x18008016820000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000020000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x40001400200L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8804001000280000L, active1, 0xc428L);
      case 114:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x828010000L, active1, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100080004100L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(8, 16);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(8, 34);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(8, 36);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(8, 57);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(8, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(8, 63);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x880000000280000L, active1, 0x28L);
      case 97:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x800004100L, active1, 0x80002L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x48000000000L, active1, 0x200000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x10014000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x20080000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000001400000L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20004028000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000100000000L, active1, 0L);
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 74, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x4080002801000L, active1, 0xc000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8002000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x140000L, active1, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x100040020000L, active1, 0x500001L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000008200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x500000L);
      case 62:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(9, 8);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(9, 17);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(9, 35);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(9, 37);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(9, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(9, 52);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(9, 64);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8200L, active1, 0xc000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x20028000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000002800000L, active1, 0x80020L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x40058001400000L, active1, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000200000000L, active1, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000002000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400104014100000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x280000L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x200080040000L, active1, 0x6L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(10, 9);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(10, 26);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(10, 32);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(10, 44);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(10, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(10, 53);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(10, 65);
         break;
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xc000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x50000001000L, active1, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x600000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x200040000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x800a0042800000L, active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x90000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x800208028200000L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000001480000L, active1, 0x80008L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000100000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(11, 12);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(11, 18);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(11, 22);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(11, 27);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(11, 33);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(11, 38);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(11, 40);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(11, 42);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(11, 45);
         break;
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0xa0000002000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000L, active1, 0x400008L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000021000000L, active1, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x8040000000L, active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000002800000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000010200000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x84000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(12, 13);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(12, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(12, 20);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(12, 23);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(12, 39);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(12, 41);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(12, 43);
         break;
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000040000000L, active1, 0x10L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400004L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000002000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x90000000L, active1, 0x4008L);
      case 111:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(12, 85);
         break;
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x21000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(13, 21);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(13, 28);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(13, 54);
         break;
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000080000000L, active1, 0x80020L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0x408010L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x21000000L, active1, 0L);
      case 111:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(13, 78, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000000L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(14, 24);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(14, 29);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(14, 55);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(14, 68);
         break;
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000L, active1, 0L);
      case 111:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(14, 86);
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100004L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(15, 25);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(15, 30);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(15, 69);
         break;
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000000L, active1, 0x100004L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x88000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(16, 31);
         break;
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80000L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(17, 66);
         break;
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000000L, active1, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8008L);
      case 110:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(17, 83);
         break;
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(18, 58);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(18, 67);
         break;
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(18, 79, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000000L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(19, 59);
         break;
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(19, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 106);
      case 46:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_1(0x800000000000L);
      case 64:
         return jjStopAtPos(0, 108);
      case 91:
         return jjStopAtPos(0, 107);
      case 93:
         return jjStopAtPos(0, 109);
      case 94:
         return jjMoveStringLiteralDfa1_1(0x2000000000000L);
      default :
         return jjMoveNfa_1(11, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 47:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 15:
                  if ((0xffffbff7ffffffffL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(15);
                  break;
               case 0:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (curChar == 41 && kind > 104)
                     kind = 104;
                  break;
               case 3:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0xfffeffff97fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAdd(15);
                  }
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  break;
               case 4:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if (curChar != 95)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0xfffeffff97fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 15:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   3, 4, 5, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\75", "\53", "\55", "\52", "\57", "\53\53", "\55\55", 
"\74\160\162\145\147\165\156\164\141\76", "\74\57\160\162\145\147\165\156\164\141\76", "\74\164\151\160\157\76", 
"\74\57\164\151\160\157\76", "\74\151\144\160\162\145\147\165\156\164\141\76", 
"\74\57\151\144\160\162\145\147\165\156\164\141\76", "\74\145\164\151\161\165\145\164\141\76", 
"\74\57\145\164\151\161\165\145\164\141\76", "\74\163\165\147\145\162\151\162\76", "\74\57\163\165\147\145\162\151\162\76", 
"\74\143\157\144\151\147\157\137\160\162\145\76", "\74\57\143\157\144\151\147\157\137\160\162\145\76", 
"\74\143\157\144\151\147\157\137\160\157\163\164\76", "\74\57\143\157\144\151\147\157\137\160\157\163\164\76", 
"\74\162\145\163\164\162\151\156\147\151\162\76", "\74\57\162\145\163\164\162\151\156\147\151\162\76", 
"\74\162\145\163\164\162\151\156\147\151\162\155\163\156\76", "\74\57\162\145\163\164\162\151\156\147\151\162\155\163\156\76", 
"\74\162\145\161\165\145\162\151\144\157\76", "\74\57\162\145\161\165\145\162\151\144\157\76", 
"\74\162\145\161\165\145\162\151\144\157\155\163\156\76", "\74\57\162\145\161\165\145\162\151\144\157\155\163\156\76", 
"\74\160\162\145\144\145\164\145\162\155\151\156\141\144\157\76", "\74\57\160\162\145\144\145\164\145\162\155\151\156\141\144\157\76", 
"\74\141\160\154\151\143\141\142\154\145\76", "\74\57\141\160\154\151\143\141\142\154\145\76", 
"\74\154\145\143\164\165\162\141\76", "\74\57\154\145\143\164\165\162\141\76", "\74\143\141\154\143\165\154\157\76", 
"\74\57\143\141\154\143\165\154\157\76", "\74\162\145\160\145\164\151\143\151\157\156\76", 
"\74\57\162\145\160\145\164\151\143\151\157\156\76", "\74\155\165\154\164\151\155\145\144\151\141\76", 
"\74\57\155\165\154\164\151\155\145\144\151\141\76", "\74\141\160\141\162\151\145\156\143\151\141\76", 
"\74\57\141\160\141\162\151\145\156\143\151\141\76", "\74\160\141\162\141\155\145\164\162\157\76", 
"\74\57\160\141\162\141\155\145\164\162\157\76", "\74\147\162\165\160\157\76", "\74\57\147\162\165\160\157\76", 
"\74\143\151\143\154\157\76", "\74\57\143\151\143\154\157\76", "\74\154\137\157\160\143\151\157\156\76", 
"\74\57\154\137\157\160\143\151\157\156\76", "\74\154\137\143\157\156\146\151\147\76", 
"\74\57\154\137\143\157\156\146\151\147\76", "\74\156\157\155\142\162\145\137\154\151\163\164\141\76", 
"\74\57\156\157\155\142\162\145\137\154\151\163\164\141\76", "\74\156\157\155\142\162\145\76", "\74\57\156\157\155\142\162\145\76", 
"\74\164\151\164\165\154\157\137\146\157\162\155\165\154\141\162\151\157\76", 
"\74\57\164\151\164\165\154\157\137\146\157\162\155\165\154\141\162\151\157\76", "\74\151\144\146\157\162\155\76", "\74\57\151\144\146\157\162\155\76", 
"\74\145\163\164\151\154\157\76", "\74\57\145\163\164\151\154\157\76", "\74\151\155\160\157\162\164\141\162\76", 
"\74\57\151\155\160\157\162\164\141\162\76", "\74\143\157\144\151\147\157\137\160\162\151\156\143\151\160\141\154\76", 
"\74\57\143\157\144\151\147\157\137\160\162\151\156\143\151\160\141\154\76", "\74\143\157\144\151\147\157\137\147\154\157\142\141\154\76", 
"\74\57\143\157\144\151\147\157\137\147\154\157\142\141\154\76", "\164\145\170\164\157", "\145\156\164\145\162\157", 
"\144\145\143\151\155\141\154", "\162\141\156\147\157", "\143\157\156\144\151\143\151\157\156", 
"\146\145\143\150\141", "\150\157\162\141", "\146\145\143\150\141\150\157\162\141", 
"\163\145\154\145\143\143\151\157\156\141\137\165\156\157", 
"\163\145\154\145\143\143\151\157\156\141\137\155\165\154\164\151\160\154\145", "\156\157\164\141", "\146\151\143\150\145\162\157", 
"\143\141\154\143\165\154\141\162", "\151\156\151\143\151\141\162\40\141\147\162\165\160\141\143\151\157\156", 
"\146\151\156\141\154\151\172\141\162\40\141\147\162\165\160\141\143\151\157\156", "\151\156\151\143\151\141\162\40\143\151\143\154\157", 
"\146\151\156\141\154\151\172\141\162\40\143\151\143\154\157", "\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", 
null, null, null, null, null, null, null, null, "\57\136", null, null, "\43", 
"\133", "\100", "\135", "\56", "\56\56", null, "\136\57", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "INICIO_CAD",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x3ff83ffffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x7c00000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[16];
private final int[] jjstateSet = new int[32];
protected char curChar;
/** Constructor. */
public compTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public compTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
