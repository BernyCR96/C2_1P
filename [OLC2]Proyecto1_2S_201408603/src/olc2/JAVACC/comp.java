/* Generated By:JavaCC: Do not edit this line. comp.java */
package olc2.JAVACC;
import java.io.*;
public class comp implements compConstants {

  final public Nodo Formulario() throws ParseException {
Nodo nuevo = new Nodo("Formulario","");
Nodo val;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PR_PREGUNTA:
      case PR_GRUPO:
      case PR_CICLO:
      case PR_L_OPCION:
      case PR_L_CONFI:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      val = CuerpoForm();
                               nuevo.setListaHojas(val);
    }
                                                             {if (true) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo CuerpoForm() throws ParseException {
Nodo nuevo = new Nodo("CuerpoForm","");
Nodo nuevo3 = new Nodo("GRUPO_PADRE","");
Nodo nuevo2 = new Nodo("CICLO_PADRE","");
Nodo nuevo1 = new Nodo("PREGUNTA","");
Nodo nuevo4 =new Nodo("L_CONFIG ","");
int contadorP =0;
Nodo val=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PR_PREGUNTA:
      jj_consume_token(PR_PREGUNTA);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_TIPO:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        val = Cuerpo(nuevo3);
                                             nuevo1.setListaHojas(val);
      }
      jj_consume_token(PR_Fin_PREGUNTA);
                                                                                                {if (true) return nuevo1;}
      break;
    case PR_GRUPO:
      jj_consume_token(PR_GRUPO);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_PREGUNTA:
        case PR_GRUPO:
        case PR_CICLO:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        val = CuerpoGrupo(nuevo3);
                                               nuevo3.setListaHojas(val);
      }
      jj_consume_token(PR_Fin_GRUPO);
                                                                                              {if (true) return nuevo3;}
      break;
    case PR_CICLO:
      jj_consume_token(PR_CICLO);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_PREGUNTA:
        case PR_GRUPO:
        case PR_CICLO:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        val = CuerpoCiclo(nuevo2);
                                               nuevo2.setListaHojas(val);
      }
      jj_consume_token(PR_Fin_CICLO);
                                                                                             {if (true) return nuevo2;}
      break;
    case PR_L_OPCION:
      jj_consume_token(PR_L_OPCION);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_NOMBRELISTA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        val = Cuerpo_Opcion();
      }
      jj_consume_token(PR_Fin_OPCION);
                                                                {if (true) return val;}
      break;
    case PR_L_CONFI:
      val = config();
                        {if (true) return val;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo config() throws ParseException {
        Nodo nuevo4 =new Nodo("L_CONFIG ","");
        Nodo val = null;
    jj_consume_token(PR_L_CONFI);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PR_TITULOFORM:
      case PR_IDFORM:
      case PR_ESTILO:
      case PR_IMPORTAR:
      case PR_CODIGO_PRINCIPAL:
      case PR_CODIGO_GLOBAL:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      val = Cuerpo_Config();
                                            nuevo4.setListaHojas(val);
    }
    jj_consume_token(PR_Fin_CONFI);
                                                                                         {if (true) return nuevo4;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo CuerpoGrupo(Nodo padre) throws ParseException {
        Nodo nuevo = new Nodo("GRUPO","");
        Nodo nuevo1 = new Nodo("CICLO","");
        Nodo val = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PR_PREGUNTA:
      jj_consume_token(PR_PREGUNTA);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_TIPO:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
        val = Cuerpo(padre);
      }
      jj_consume_token(PR_Fin_PREGUNTA);
                                                               {if (true) return val;}
      break;
    case PR_GRUPO:
      jj_consume_token(PR_GRUPO);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_PREGUNTA:
        case PR_GRUPO:
        case PR_CICLO:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_8;
        }
        val = CuerpoGrupo(nuevo);
                                               nuevo.setListaHojas(val);
      }
      jj_consume_token(PR_Fin_GRUPO);
                                                                                            {if (true) return nuevo;}
      break;
    case PR_CICLO:
      jj_consume_token(PR_CICLO);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_PREGUNTA:
        case PR_GRUPO:
        case PR_CICLO:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_9;
        }
        val = CuerpoCiclo(nuevo1);
                                                nuevo1.setListaHojas(val);
      }
      jj_consume_token(PR_Fin_CICLO);
                                                                                             {if (true) return nuevo1;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo CuerpoCiclo(Nodo padre) throws ParseException {
        Nodo nuevo1 = new Nodo("CICLO","");
        Nodo nuevo = new Nodo("GRUPO","");
        Nodo val = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PR_PREGUNTA:
      jj_consume_token(PR_PREGUNTA);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_TIPO:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_10;
        }
        val = Cuerpo(padre);
      }
      jj_consume_token(PR_Fin_PREGUNTA);
                                                               {if (true) return val;}
      break;
    case PR_GRUPO:
      jj_consume_token(PR_GRUPO);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_PREGUNTA:
        case PR_GRUPO:
        case PR_CICLO:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_11;
        }
        val = CuerpoGrupo(nuevo);
                                               nuevo.setListaHojas(val);
      }
      jj_consume_token(PR_Fin_GRUPO);
                                                                                            {if (true) return nuevo;}
      break;
    case PR_CICLO:
      jj_consume_token(PR_CICLO);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PR_PREGUNTA:
        case PR_GRUPO:
        case PR_CICLO:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_12;
        }
        val = CuerpoCiclo(nuevo1);
                                                nuevo1.setListaHojas(val);
      }
      jj_consume_token(PR_Fin_CICLO);
                                                                                              {if (true) return nuevo1;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Cuerpo(Nodo grupo) throws ParseException {
        Nodo t=new Nodo("L_ENCABEZADO ","");
        Nodo val;
        String cadena ="";
        String aux = "";
        String ID_pregunta = "";
        boolean asigGrupo = false;
        boolean asigCiclo = false;
    jj_consume_token(PR_TIPO);
    val = TIPO();
                                        t.setListaHojas(val);
                if (val.isGrupo() == true) {
                        asigGrupo = true;
                }
                if (val.isCiclo() == true) {
                        asigCiclo = true;
                }
    jj_consume_token(PR_Fin_TIPO);
    jj_consume_token(PR_IDPREGUNTA);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ETINI:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_13;
      }
      cadena = Etiqueta(grupo, "");
    }
         val = new Nodo("idpregunta", cadena);
         t.setListaHojas(val);
         t.setValor(cadena);
         ID_pregunta = cadena;
         if (asigGrupo == true) {
                 grupo.setValor(cadena);
         }
         if (asigCiclo == true) {
                grupo.setValor(cadena);
        }
    jj_consume_token(PR_Fin_IDPREGUNTA);
    jj_consume_token(PR_ETIQUETA);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ETINI:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_14;
      }
      cadena = Etiqueta(grupo, "");
    }
         val = new Nodo("etiqueta", cadena);  t.setListaHojas(val);
    jj_consume_token(PR_Fin_ETIQUETA);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PR_SUGERIR:
      case PR_CODIGO_PRE:
      case PR_CODIGO_POST:
      case PR_RESTRINGIR:
      case PR_RESTRINGIRMSN:
      case PR_REQUERIDO:
      case PR_REQUERIDOMSN:
      case PR_PREDETERMINADO:
      case PR_APLICABLE:
      case PR_LECTURA:
      case PR_CALCULO:
      case PR_REPETICION:
      case PR_MULTIMEDIA:
      case PR_APARIENCIA:
      case PR_PARAMETRO:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_15;
      }
      val = L_Opcionales(grupo, ID_pregunta);
                                                   t.setListaHojas(val);
    }
                System.out.println("entre4");{if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo TIPO() throws ParseException {
        Nodo nuevo;
 Token val;
Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PR_texto:
      t = jj_consume_token(PR_texto);
                        {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_entero:
      t = jj_consume_token(PR_entero);
                         {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_decimal:
      t = jj_consume_token(PR_decimal);
                          {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_rango:
      t = jj_consume_token(PR_rango);
                        {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_condicion:
      t = jj_consume_token(PR_condicion);
                            {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_fecha:
      t = jj_consume_token(PR_fecha);
                        {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_hora:
      t = jj_consume_token(PR_hora);
                       {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_fechahora:
      t = jj_consume_token(PR_fechahora);
                            {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_seleccion_uno:
      t = jj_consume_token(PR_seleccion_uno);
      val = jj_consume_token(IDENTIFIER);
                                                  {if (true) return nuevo = new Nodo(t.image,val.image) ;}
      break;
    case PR_seleccion_multiple:
      t = jj_consume_token(PR_seleccion_multiple);
      val = jj_consume_token(IDENTIFIER);
                                                       {if (true) return nuevo = new Nodo(t.image,val.image) ;}
      break;
    case PR_nota:
      t = jj_consume_token(PR_nota);
                      {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_fichero:
      t = jj_consume_token(PR_fichero);
                         {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_calcular:
      t = jj_consume_token(PR_calcular);
                          {if (true) return nuevo = new Nodo("Tipo",t.image) ;}
      break;
    case PR_inicio_grupo:
      t = jj_consume_token(PR_inicio_grupo);
                                nuevo = new Nodo("Tipo",t.image) ; nuevo.setGrupo(true); {if (true) return nuevo;}
      break;
    case PR_finalizar_grupo:
      t = jj_consume_token(PR_finalizar_grupo);
                                 {if (true) return nuevo =  new Nodo("Tipo",t.image) ;}
      break;
    case PR_finalizar_ciclo:
      t = jj_consume_token(PR_finalizar_ciclo);
                                 nuevo = new Nodo("Tipo",t.image) ;  {if (true) return nuevo;}
      break;
    case PR_iniciar_ciclo:
      t = jj_consume_token(PR_iniciar_ciclo);
                                nuevo = new Nodo("Tipo",t.image) ; nuevo.setCiclo(true); {if (true) return nuevo;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Cuerpo_Opcion() throws ParseException {
        Nodo nuevo =new Nodo("L_OPCION ","");
        Nodo t;
        String cadena="";
        Nodo val;
    jj_consume_token(PR_NOMBRELISTA);
    cadena = Etiqueta(nuevo, "");
                                t = nuevo;
                                val = new Nodo("NombreLista", cadena);
                                t.setListaHojas(val); t.setValor(cadena);
    jj_consume_token(PR_Fin_NOMBRELISTA);
    jj_consume_token(PR_NOMBRE);
    cadena = Etiqueta(nuevo, "");
                val = new Nodo("NOMBRE", cadena);
                t.setListaHojas(val);
    jj_consume_token(PR_Fin_NOMBRE);
    jj_consume_token(PR_ETIQUETA);
    cadena = Etiqueta(nuevo, "");
                val = new Nodo("ETIQUETA", cadena);
                t.setListaHojas(val);
    jj_consume_token(PR_Fin_ETIQUETA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PR_MULTIMEDIA:
      jj_consume_token(PR_MULTIMEDIA);
      cadena = EtiquetaCodigo(nuevo, "");
                val = new Nodo("MULTIMEDIA", cadena);
                t.setListaHojas(val);
      jj_consume_token(PR_Fin_MULTIMEDIA);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Cuerpo_Config() throws ParseException {
        Nodo nuevo = null;
        Nodo val;
        String cadena="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PR_IDFORM:
      jj_consume_token(PR_IDFORM);
      cadena = Etiqueta(nuevo, "");
                                                   val = new Nodo("IDFORM",cadena);
      jj_consume_token(PR_Fin_IDFORM);
                                                                                                      {if (true) return val;}
      break;
    case PR_TITULOFORM:
      jj_consume_token(PR_TITULOFORM);
      cadena = Etiqueta(nuevo, "");
                                                         val = new Nodo("TITULOFORM",cadena);
      jj_consume_token(PR_Fin_TITULOFORM);
                                                                                                                   {if (true) return val;}
      break;
    case PR_ESTILO:
      jj_consume_token(PR_ESTILO);
      cadena = Etiqueta(nuevo, "");
                                                    val = new Nodo("ESTILO",cadena);
      jj_consume_token(PR_Fin_ESTILO);
                                                                                                       {if (true) return val;}
      break;
    case PR_IMPORTAR:
      jj_consume_token(PR_IMPORTAR);
      cadena = EtiquetaCodigo(nuevo, "");
                                                             val = new Nodo("IMPORTAR",cadena);
      jj_consume_token(PR_Fin_IMPORTAR);
                                                                                                                   {if (true) return val;}
      break;
    case PR_CODIGO_PRINCIPAL:
      jj_consume_token(PR_CODIGO_PRINCIPAL);
      cadena = Etiqueta(nuevo, "");
                                                               val = new Nodo("CODIGO_PRINCIPAL",cadena);
      jj_consume_token(PR_Fin_CODIGO_PRINCIPAL);
                                                                                                                                      {if (true) return val;}
      break;
    case PR_CODIGO_GLOBAL:
      jj_consume_token(PR_CODIGO_GLOBAL);
      cadena = Etiqueta(nuevo, "");
                                                            val = new Nodo("CODIGO_GLOBAL",cadena);
      jj_consume_token(PR_Fin_CODIGO_GLOBAL);
                                                                                                                              {if (true) return val;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo L_Opcionales(Nodo nodo, String id_preg) throws ParseException {
Nodo nuevo;
String cad;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PR_SUGERIR:
      jj_consume_token(PR_SUGERIR);
      cad = Etiqueta(nodo, id_preg);
                                                              nuevo = new Nodo("sugerir",cad);
      jj_consume_token(PR_Fin_SUGERIR);
                                                                                                                   {if (true) return nuevo;}
      break;
    case PR_CODIGO_PRE:
      jj_consume_token(PR_CODIGO_PRE);
      cad = EtiquetaCodigo(nodo, id_preg);
                                                               nuevo = new Nodo("codigo_pre",cad);
      jj_consume_token(PR_Fin_CODIGO_PRE);
                                                                                                                         {if (true) return nuevo;}
      break;
    case PR_CODIGO_POST:
      jj_consume_token(PR_CODIGO_POST);
      cad = EtiquetaCodigo(nodo, id_preg);
                                                                nuevo = new Nodo("codigo_post",cad);
      jj_consume_token(PR_Fin_CODIGO_POST);
                                                                                                                            {if (true) return nuevo;}
      break;
    case PR_RESTRINGIR:
      jj_consume_token(PR_RESTRINGIR);
      cad = Etiqueta(nodo, id_preg);
                                                         nuevo = new Nodo("restringir",cad);
      jj_consume_token(PR_Fin_RESTRINGIR);
                                                                                                                   {if (true) return nuevo;}
      break;
    case PR_RESTRINGIRMSN:
      jj_consume_token(PR_RESTRINGIRMSN);
      cad = Etiqueta(nodo, id_preg);
                                                            nuevo = new Nodo("restringirmsn",cad);
      jj_consume_token(PR_Fin_RESTRINGIRMSN);
                                                                                                                            {if (true) return nuevo;}
      break;
    case PR_REQUERIDO:
      jj_consume_token(PR_REQUERIDO);
      cad = Etiqueta(nodo, id_preg);
                                                        nuevo = new Nodo("requerido",cad);
      jj_consume_token(PR_Fin_REQUERIDO);
                                                                                                                {if (true) return nuevo;}
      break;
    case PR_REQUERIDOMSN:
      jj_consume_token(PR_REQUERIDOMSN);
      cad = Etiqueta(nodo, id_preg);
                                                           nuevo = new Nodo("requeridomsn",cad);
      jj_consume_token(PR_Fin_REQUERIDOMSN);
                                                                                                                         {if (true) return nuevo;}
      break;
    case PR_PREDETERMINADO:
      jj_consume_token(PR_PREDETERMINADO);
      cad = Etiqueta(nodo, id_preg);
                                                             nuevo = new Nodo("predeterminado",cad);
      jj_consume_token(PR_Fin_PREDETERMINADO);
                                                                                                                               {if (true) return nuevo;}
      break;
    case PR_APLICABLE:
      jj_consume_token(PR_APLICABLE);
      cad = Etiqueta(nodo, id_preg);
                                                        nuevo = new Nodo("aplicable",cad);
      jj_consume_token(PR_Fin_APLICABLE);
                                                                                                                {if (true) return nuevo;}
      break;
    case PR_LECTURA:
      jj_consume_token(PR_LECTURA);
      cad = Etiqueta(nodo, id_preg);
                                                      nuevo = new Nodo("lectura",cad);
      jj_consume_token(PR_Fin_LECTURA);
                                                                                                          {if (true) return nuevo;}
      break;
    case PR_CALCULO:
      jj_consume_token(PR_CALCULO);
      cad = Etiqueta(nodo, id_preg);
                                                      nuevo = new Nodo("calculo",cad);
      jj_consume_token(PR_Fin_CALCULO);
                                                                                                          {if (true) return nuevo;}
      break;
    case PR_REPETICION:
      jj_consume_token(PR_REPETICION);
      cad = Etiqueta(nodo, id_preg);
                                                         nuevo = new Nodo("repeticion",cad);
      jj_consume_token(PR_Fin_REPETICION);
                                                                                                                   {if (true) return nuevo;}
      break;
    case PR_MULTIMEDIA:
      jj_consume_token(PR_MULTIMEDIA);
      cad = Etiqueta(nodo, id_preg);
                                                         nuevo = new Nodo("multimedia",cad);
      jj_consume_token(PR_Fin_MULTIMEDIA);
                                                                                                                   {if (true) return nuevo;}
      break;
    case PR_APARIENCIA:
      jj_consume_token(PR_APARIENCIA);
      cad = Etiqueta(nodo, id_preg);
                                                         nuevo = new Nodo("apariencia",cad);
      jj_consume_token(PR_Fin_APARIENCIA);
                                                                                                                   {if (true) return nuevo;}
      break;
    case PR_PARAMETRO:
      jj_consume_token(PR_PARAMETRO);
      cad = Etiqueta(nodo, id_preg);
                                                        nuevo = new Nodo("parametro",cad);
      jj_consume_token(PR_Fin_PARAMETRO);
                                                                                                                {if (true) return nuevo;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Etiqueta(Nodo nodo, String preg) throws ParseException {
 String Cad="";
String aux="";
    jj_consume_token(ETINI);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSI:
      case ID:
      case Numeral:
      case ARRO:
      case Punto:
      case PuntoP:
      case Cualquiera:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_16;
      }
      aux = T(nodo, preg);
                              Cad += aux;
    }
    jj_consume_token(ETFIN);
                                                        System.out.println(Cad); {if (true) return Cad;}
    throw new Error("Missing return statement in function");
  }

  final public String EtiquetaCodigo(Nodo nodo, String preg) throws ParseException {
 String Cad="";
String aux="";
    jj_consume_token(ETINI);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSI:
      case ID:
      case Numeral:
      case ARRO:
      case Punto:
      case PuntoP:
      case Cualquiera:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_17;
      }
      aux = T1(nodo, preg);
                               Cad += aux;
    }
    jj_consume_token(ETFIN);
                                                         System.out.println(Cad); {if (true) return Cad;}
    throw new Error("Missing return statement in function");
  }

  final public String T1(Nodo nodo, String preg) throws ParseException {
 Token t;
Token izquierda;
Token derecha;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Cualquiera:
      t = jj_consume_token(Cualquiera);
                    {if (true) return t.image;}
      break;
    case POSI:
      jj_consume_token(POSI);
          {if (true) return "posici..";}
      break;
    case ID:
      t = jj_consume_token(ID);
            {if (true) return t.image + "";}
      break;
    default:
      jj_la1[24] = jj_gen;
      if (jj_2_1(2)) {
        jj_consume_token(Numeral);
        jj_consume_token(Acor);
        t = jj_consume_token(ID);
        jj_consume_token(Ccor);
                                                {if (true) return t.image + " ";}
      } else if (jj_2_2(2)) {
        jj_consume_token(Numeral);
                          {if (true) return "#";}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRO:
          jj_consume_token(ARRO);
           {if (true) return preg;}
          break;
        case Punto:
          jj_consume_token(Punto);
           {if (true) return ".";}
          break;
        case PuntoP:
          jj_consume_token(PuntoP);
             {if (true) return nodo.getValor();}
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String T(Nodo nodo, String preg) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Cualquiera:
      t = jj_consume_token(Cualquiera);
                  {if (true) return t.image;}
      break;
    case POSI:
      jj_consume_token(POSI);
          {if (true) return "posici..";}
      break;
    case ID:
      t = jj_consume_token(ID);
           {if (true) return t.image + "";}
      break;
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_3(2)) {
        jj_consume_token(Numeral);
        jj_consume_token(Acor);
        t = jj_consume_token(ID);
        jj_consume_token(Ccor);
                                              {if (true) return t.image + " ";}
      } else if (jj_2_4(2)) {
        jj_consume_token(Numeral);
                         {if (true) return "#";}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRO:
          jj_consume_token(ARRO);
          {if (true) return "@";}
          break;
        case Punto:
          jj_consume_token(Punto);
           {if (true) return preg;}
          break;
        case PuntoP:
          jj_consume_token(PuntoP);
            {if (true) return nodo.getValor();}
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(Numeral)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(Numeral)) return true;
    if (jj_scan_token(Acor)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(Numeral)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(Numeral)) return true;
    if (jj_scan_token(Acor)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public compTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x400,0x100,0x100,0x0,0x100,0x0,0x400,0x100,0x100,0x100,0x400,0x100,0x100,0x100,0x0,0x0,0x55550000,0x0,0x0,0x0,0x55550000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x154000,0x0,0x14000,0x14000,0x400000,0x154000,0x54000000,0x0,0x14000,0x14000,0x14000,0x0,0x14000,0x14000,0x14000,0x0,0x0,0x1555,0x0,0x100,0x54000000,0x1555,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x15,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fffc0,0x0,0x15,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x1d700,0x1d700,0x10300,0xd000,0x10300,0xd000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public comp(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public comp(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public comp(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[114];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 114; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        /*public static void main( String[] args )throws ParseException, Exception
	{
		try
		{		
     		comp analizador = new comp( System.in ) ;
			analizador.Programa();
			System.out.println("\tAnalizador ha terminado.");			
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\tAnalizador ha terminado.");
		}
	}*/
}
