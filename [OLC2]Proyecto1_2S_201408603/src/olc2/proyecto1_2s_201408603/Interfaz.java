/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package olc2.proyecto1_2s_201408603;

import olc2.JAVACC.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

/**
 *
 * @author Cardona
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("File");

        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 890, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 463, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JFileChooser selectorArchivos = new JFileChooser();
        selectorArchivos.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

// indica cual fue la accion de usuario sobre el jfilechooser
        int resultado = selectorArchivos.showOpenDialog(this);

        File archivo = selectorArchivos.getSelectedFile(); // obtiene el archivo seleccionado

// muestra error si es inválido
        if ((archivo == null) || (archivo.getName().equals(""))) {
            JOptionPane.showMessageDialog(this, "Nombre de archivo inválido", "Nombre de archivo inválido", JOptionPane.ERROR_MESSAGE);
        } // fin de if
        else {
            String dir = archivo.getAbsolutePath();
            try {
                escribirArchivo(dir);
            } catch (IOException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidFormatException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            // TODO add your handling code here:
            pruebaparser();
        } catch (ParseException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    void escribirArchivo(String dir) throws FileNotFoundException, IOException, InvalidFormatException, ParseException {
        ArrayList<SheetEncuesta> encabezado = new ArrayList<>();
        ArrayList<SheetOpciones> L_opciones = new ArrayList<>();
        ArrayList<SheetConfig> L_config = new ArrayList<>();
        int cont = 0;
        File archivoExcel = new File(dir); //ruta del archivo xls o xlsx
        Workbook libroExcel = WorkbookFactory.create(new FileInputStream(archivoExcel)); //crear un libro excel

        Sheet hojaEncuesta = libroExcel.getSheetAt(0);
        Iterator<Row> rowIterator = hojaEncuesta.iterator();

        Row row;

        if (rowIterator.hasNext()) {
            row = rowIterator.next();

            Iterator<Cell> cellIterator = row.cellIterator();
            Cell celda;
            while (cellIterator.hasNext()) {
                celda = cellIterator.next();
                SheetEncuesta dato = new SheetEncuesta();
                int orden = 3;
                switch (celda.getCellType()) {
                    case Cell.CELL_TYPE_NUMERIC:
                        if (DateUtil.isCellDateFormatted(celda)) {
                            System.out.println(celda.getDateCellValue());
                            cont++;
                        } else {
                            System.out.println(celda.getNumericCellValue());
                            cont++;
                        }
                        break;
                    case Cell.CELL_TYPE_STRING:

                        switch (celda.getStringCellValue().toLowerCase()) {

                            case "tipo":
                                dato.nombre = "tipo";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = 0;
                                encabezado.add(dato);

                                break;
                            case "idpregunta":
                                dato.nombre = "idpregunta";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = 1;
                                encabezado.add(dato);

                                break;
                            case "etiqueta":
                                dato.nombre = "etiqueta";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = 2;
                                encabezado.add(dato);
                                break;
                            case "sugerencia":
                                dato.nombre = "sugerencia";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "codigo_pre":
                                dato.nombre = "codigo_pre";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "codigo_post":
                                dato.nombre = "codigo_post";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "restringir":
                                dato.nombre = "restringir";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "restringirmsn":
                                dato.nombre = "restringirmsn";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "requerido":
                                dato.nombre = "requerido";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "requeridomsn":
                                dato.nombre = "requeridomsn";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "predeterminado":
                                dato.nombre = "predeterminado";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "aplicable":
                                dato.nombre = "aplicable";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "lectura":
                                dato.nombre = "lectura";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "calculo":
                                dato.nombre = "calculo";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "repeticion":
                                dato.nombre = "repeticion";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "multimedia":
                                dato.nombre = "multimedia";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "apariencia":
                                dato.nombre = "apariencia";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;
                            case "parametro":
                                dato.nombre = "parametro";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = orden;
                                encabezado.add(dato);
                                orden++;
                                break;

                        }
                        cont++;
                        break;
                    case Cell.CELL_TYPE_BOOLEAN:
                        System.out.println(celda.getBooleanCellValue());
                        cont++;
                        break;

                }
            }

        }
        Collections.sort(encabezado);
        String cadena = "";
        int conta = 0;
        int fingrupo = 0;
        // recorro todas las siguientes filas y empiezo a crear el archivo.
        while (rowIterator.hasNext()) {
            row = rowIterator.next();
            conta++;

            for (SheetEncuesta celdas : encabezado) {
                if ("tipo".equals(celdas.nombre)) {
                    if (row.getCell(celdas.posicion).getStringCellValue().toLowerCase().trim() == "") {
                        cadena += "<" + celdas.nombre + ">" + "</" + celdas.nombre + ">\n";

                    }
                }

                if ("idpregunta".equals(celdas.nombre)) {
                    if (row.getCell(celdas.posicion).getStringCellValue().toLowerCase().trim() == "") {
                        cadena += "<" + celdas.nombre + ">" + "</" + celdas.nombre + ">\n";

                    }
                }

                if ("etiqueta".equals(celdas.nombre)) {
                    if (row.getCell(celdas.posicion).getStringCellValue().toLowerCase().trim() == "") {
                        cadena += "<" + celdas.nombre + ">" + "</" + celdas.nombre + ">\n";

                    }
                }

                if (row.getCell(celdas.posicion) != null) {
                    if (celdas.orden == 0 && "iniciar agrupacion".equals(row.getCell(celdas.posicion).getStringCellValue().toLowerCase().trim())) {
                        cadena += "<grupo>\n" + "<pregunta>\n";
                    } else if (celdas.orden == 0 && "iniciar ciclo".equals(row.getCell(celdas.posicion).getStringCellValue().toLowerCase().trim())) {
                        cadena += "<ciclo>\n" + "<pregunta>\n";
                    } else if (celdas.orden == 0 && (!"iniciar ciclo".equals(row.getCell(celdas.posicion).getStringCellValue().toLowerCase().trim()) || !"iniciar agrupacion".equals(row.getCell(celdas.posicion).getStringCellValue().toLowerCase()))) {
                        cadena += "<pregunta>\n";
                    }

                    switch (row.getCell(celdas.posicion).getCellType()) {
                        case Cell.CELL_TYPE_NUMERIC:
                            String valor = Integer.toString((int) row.getCell(celdas.posicion).getNumericCellValue());
                            if ("finalizar agrupacion".equals(valor.trim())) {

                                fingrupo++;
                            }
                            if ("finalizar ciclo".equals(valor.trim())) {

                                fingrupo = 2;
                            }
                            cadena += "<" + celdas.nombre + ">" + "/^" + valor.toLowerCase().trim().replace("ó", "o") + "^/" + "</" + celdas.nombre + ">\n";

                            break;

                        case 1:
                            if ("finalizar agrupacion".equals(row.getCell(celdas.posicion).getStringCellValue().toLowerCase())) {
                                fingrupo++;

                            }
                            if ("finalizar ciclo".equals(row.getCell(celdas.posicion).getStringCellValue().toLowerCase())) {
                                fingrupo = 2;

                            }
                            if ("tipo".equals(celdas.nombre)) {

                                cadena += "<" + celdas.nombre + ">" + row.getCell(celdas.posicion).getStringCellValue().toLowerCase().trim().replace("ó", "o") + "</" + celdas.nombre + ">\n";

                            } else {
                                cadena += "<" + celdas.nombre + ">" + "/^" + row.getCell(celdas.posicion).getStringCellValue().toLowerCase().trim().replace("ó","o") + "^/" + "</" + celdas.nombre + ">\n";
                            }
                            break;
                    }

                } else {
                    //cadena += "<" + celdas.nombre + ">" +" "+ "</" + celdas.nombre + ">\n";

                }

            }
            if (fingrupo == 0) {
                cadena += "</pregunta>\n\n";
            } else if (fingrupo == 2) {
                cadena += "</pregunta>\n" + "</ciclo>\n\n";
                fingrupo = 0;

            } else {
                cadena += "</pregunta>\n" + "</grupo>\n\n";
                fingrupo = 0;

            }

        }

        //*********************************************************************
        Sheet hojaOpciones = libroExcel.getSheetAt(1);
        Iterator<Row> rowIterator2 = hojaOpciones.iterator();

        Row row2;

        if (rowIterator2.hasNext()) {
            row2 = rowIterator2.next();

            Iterator<Cell> cellIterator = row2.cellIterator();
            Cell celda;
            while (cellIterator.hasNext()) {
                celda = cellIterator.next();
                SheetOpciones dato2 = new SheetOpciones();
                int orden = 3;
                switch (celda.getCellType()) {
                    case Cell.CELL_TYPE_NUMERIC:
                        if (DateUtil.isCellDateFormatted(celda)) {
                            System.out.println(celda.getDateCellValue());
                            cont++;
                        } else {
                            System.out.println(celda.getNumericCellValue());
                            cont++;
                        }
                        break;
                    case Cell.CELL_TYPE_STRING:

                        switch (celda.getStringCellValue().toLowerCase()) {

                            case "nombre_lista":
                                dato2.nombre = "nombre_lista";
                                dato2.posicion = celda.getColumnIndex();
                                dato2.orden = 0;
                                L_opciones.add(dato2);

                                break;
                            case "nombre":
                                dato2.nombre = "nombre";
                                dato2.posicion = celda.getColumnIndex();
                                dato2.orden = 1;
                                L_opciones.add(dato2);

                                break;
                            case "etiqueta":
                                dato2.nombre = "etiqueta";
                                dato2.posicion = celda.getColumnIndex();
                                dato2.orden = 2;
                                L_opciones.add(dato2);
                                break;
                            case "multimedia":
                                dato2.nombre = "multimedia";
                                dato2.posicion = celda.getColumnIndex();
                                dato2.orden = 3;
                                L_opciones.add(dato2);
                                orden++;
                                break;

                        }

                        break;
                    case Cell.CELL_TYPE_BOOLEAN:
                        System.out.println(celda.getBooleanCellValue());
                        cont++;
                        break;

                }
            }

        }

        Collections.sort(L_opciones);

        // recorro todas las siguientes filas y empiezo a crear el archivo.
        while (rowIterator2.hasNext()) {
            row2 = rowIterator2.next();
            conta++;
            cadena += "<l_opcion>\n";
            for (SheetOpciones celdas : L_opciones) {

                if (row2.getCell(celdas.posicion) != null) {

                    switch (row2.getCell(celdas.posicion).getCellType()) {
                        case Cell.CELL_TYPE_NUMERIC:
                            String valor = Integer.toString((int) row2.getCell(celdas.posicion).getNumericCellValue());
                            cadena += "<" + celdas.nombre + ">" + "/^" + valor.replace("ó", "o") + "^/" + "</" + celdas.nombre + ">\n";

                            break;

                        case 1:
                            cadena += "<" + celdas.nombre + ">" + "/^" + row2.getCell(celdas.posicion).getStringCellValue().toLowerCase().trim().replace("ó","o") + "^/" + "</" + celdas.nombre + ">\n";

                            break;
                    }
                } else {
                    //cadena += "<" + celdas.nombre + ">" +" "+ "</" + celdas.nombre + ">\n";

                }
            }
            cadena += "</l_opcion>\n\n";
        }

        //******************************Hoja configuracion******************************************
        Sheet hojaConfig = libroExcel.getSheetAt(2);
        Iterator<Row> rowIterator3 = hojaConfig.iterator();

        Row row3;

        if (rowIterator3.hasNext()) {
            row3 = rowIterator3.next();

            Iterator<Cell> cellIterator = row3.cellIterator();
            Cell celda;
            while (cellIterator.hasNext()) {
                celda = cellIterator.next();
                SheetConfig dato = new SheetConfig();
                int orden = 3;
                switch (celda.getCellType()) {
                    case Cell.CELL_TYPE_NUMERIC:
                        if (DateUtil.isCellDateFormatted(celda)) {
                            System.out.println(celda.getDateCellValue());
                            cont++;
                        } else {
                            System.out.println(celda.getNumericCellValue());
                            cont++;
                        }
                        break;
                    case Cell.CELL_TYPE_STRING:

                        switch (celda.getStringCellValue().toLowerCase()) {

                            case "titulo_formulario":
                                dato.nombre = "titulo_formulario";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = 0;
                                L_config.add(dato);

                                break;
                            case "idform":
                                dato.nombre = "idform";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = 1;
                                L_config.add(dato);

                                break;
                            case "estilo":
                                dato.nombre = "estilo";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = 2;
                                L_config.add(dato);
                                break;
                            case "importar":
                                dato.nombre = "importar";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = 3;
                                L_config.add(dato);
                                orden++;
                                break;
                            case "codigo_principal":
                                dato.nombre = "codigo_principal";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = 4;
                                L_config.add(dato);
                                orden++;
                                break;
                            case "codigo_global":
                                dato.nombre = "codigo_global";
                                dato.posicion = celda.getColumnIndex();
                                dato.orden = 5;
                                L_config.add(dato);
                                orden++;
                                break;
                        }

                        break;
                    case Cell.CELL_TYPE_BOOLEAN:
                        System.out.println(celda.getBooleanCellValue());
                        cont++;
                        break;

                }
            }

        }

        Collections.sort(L_config);

        // recorro todas las siguientes filas y empiezo a crear el archivo.
        while (rowIterator3.hasNext()) {
            row3 = rowIterator3.next();
            conta++;
            cadena += "<l_config>\n";
            for (SheetConfig celdas3 : L_config) {

                if (row3.getCell(celdas3.posicion) != null) {

                    switch (row3.getCell(celdas3.posicion).getCellType()) {
                        case Cell.CELL_TYPE_NUMERIC:
                            String valor = Integer.toString((int) row3.getCell(celdas3.posicion).getNumericCellValue());
                            cadena += "<" + celdas3.nombre + ">" + "/^" + valor.trim().replace("ó","o") + "^/" + "</" + celdas3.nombre + ">\n";

                            break;

                        case 1:
                            cadena += "<" + celdas3.nombre + ">" + "/^" + row3.getCell(celdas3.posicion).getStringCellValue().toLowerCase().trim().replace("ó","o")
                                    + "^/" + "</" + celdas3.nombre + ">\n";

                            break;
                    }
                } else {
                    //cadena += "<" + celdas.nombre + ">" +" "+ "</" + celdas.nombre + ">\n";

                }
            }
            cadena += "</l_config>\n\n";
        }
        FileWriter fichero = null;
        PrintWriter pw = null;

        try {
            fichero = new FileWriter("C:\\Users\\Cardona\\Documents\\NetBeansProjects\\[OLC2]Proyecto1_2S_201408603\\entrada.txt");
            pw = new PrintWriter(fichero);
            pw.print(cadena);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }

        System.out.println(cadena);

    }

    public void pruebaparser() throws ParseException {
        
        try {
            comp Parser = new comp(new FileInputStream("C:\\Users\\Cardona\\Documents\\NetBeansProjects\\[OLC2]Proyecto1_2S_201408603\\entrada.txt"));
            
            
                Nodo arbol = Parser.Formulario();
            
           
//            System.out.println(arbol.getNombre());
            Convert_XFORM nuevo = new Convert_XFORM();
            System.out.println(nuevo.Convertidor(arbol));
            
            graficarArbol(arbol);
            CrearDot();
            
            
            System.out.println("El analisis ha  terminado");

            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
           }
 
    private static int cont =0;
    private static String cadena="";
    
    private String graficarArbol(Nodo e){
       String id_padre = "Nodo" + cont;
        cont++;
        cadena += id_padre + "[label=\"" + e.getNombre()+ ":"+ e.getValor().replace("\n", "").replace("\"", "") + "\"];\n";
        //System.out.println("cadena: " + cadena_dot);
        for (Nodo hijo : e.getListaHojas()) {
            if (hijo != null) {
                String cad = id_padre + "->" + graficarArbol(hijo) + ";\n";
                cadena += cad;
            }

        }

        return id_padre;
        
    }
    
     private void CrearDot() {
        try {
            File archivo_dot = new File("arbol.txt");
            FileWriter escribir = new FileWriter(archivo_dot, false);
            escribir.write("digraph Grafo{\n " + cadena + "\n}\n");
            escribir.close();
            CrearImg("C:\\Users\\Cardona\\Documents\\NetBeansProjects\\[OLC2]Proyecto1_2S_201408603\\arbol.txt","C:\\Users\\Cardona\\Documents\\NetBeansProjects\\[OLC2]Proyecto1_2S_201408603\\grafo.png");
        } catch (Exception e) {
            System.err.println("Error al crear el DOT");
        } finally {

        }
    }
     
      private void CrearImg(String direccionDot, String direccionImg) {
        try {
            /*ProcessBuilder img;
            img = new ProcessBuilder("C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe", "-Tpng", "-o", direccionImg, direccionDot);
            img.redirectErrorStream(true);
            img.start();*/
            String[]  cmd = {"C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe","-Tpng",direccionDot,"-o",direccionImg};
            Runtime rt = Runtime.getRuntime();
            rt.exec(cmd);
        } catch (Exception e) {
            System.out.println(e.toString());;
        }
        
      }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                
                
                
                new Interfaz().setVisible(true);
                

                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    // End of variables declaration//GEN-END:variables
}
